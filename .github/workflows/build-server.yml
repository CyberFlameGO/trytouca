# Copyright 2021 Touca, Inc. Subject to Apache-2.0 License.

name: Platform

on:
  push:
    paths-ignore:
      - "docs/internal/**"

jobs:
  api-build-native:
    name: api-build-native
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - name: authenticate to aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_ACCESS_KEY_SECRET }}
          aws-region: us-east-2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=0 | cut -c 2-)"
          echo "::set-output name=release::${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')) }}"
          echo "::set-output name=buckets::${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v$(git describe --tags --abbrev=0 | cut -c 2-)"

      - uses: actions/setup-node@v2
        if: steps.changes.outputs.api == 'true'
      - uses: actions/cache@v2
        if: steps.changes.outputs.api == 'true'
        with:
          path: ${{ github.workspace }}/api/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: build api
        if: steps.changes.outputs.api == 'true'
        run: |
          yarn --cwd=api install
          yarn --cwd=api build
          yarn --cwd=api lint
          yarn --cwd=api test
          yarn --cwd=api docs
          tar -zcf api.tar.gz api/dist
          tar -zcf api-docs-external.tar.gz api/local/docs/external
          tar -zcf api-docs-internal.tar.gz api/local/docs/internal
          tar -zcf api-test-coverage.tar.gz api/local/tests

      - name: push api to aws
        if: steps.changes.outputs.api == 'true' && steps.params.outputs.release == 'true'
        run: |
          aws s3 cp api.tar.gz ${{ steps.params.outputs.buckets }}/
          aws s3 cp api-docs-external.tar.gz ${{ steps.params.outputs.buckets }}/
          aws s3 cp api-docs-internal.tar.gz ${{ steps.params.outputs.buckets }}/
          aws s3 cp api-test-coverage.tar.gz ${{ steps.params.outputs.buckets }}/

      - name: pull api from aws
        if: steps.changes.outputs.api == 'false'
        run: |
          aws s3 cp ${{ steps.params.outputs.buckets }}/api.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/api-docs-external.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/api-docs-internal.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/api-test-coverage.tar.gz .

      - uses: actions/upload-artifact@v2
        with:
          name: api-bundle
          path: ${{ github.workspace }}/api.tar.gz
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: docs-external-api
          path: ${{ github.workspace }}/api-docs-external.tar.gz
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: docs-internal-api
          path: ${{ github.workspace }}/api-docs-internal.tar.gz
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: tests-internal-api
          path: ${{ github.workspace }}/api-test-coverage.tar.gz
          retention-days: 1

  app-build-native:
    name: app-build-native
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - name: authenticate to aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_ACCESS_KEY_SECRET }}
          aws-region: us-east-2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=0 | cut -c 2-)"
          echo "::set-output name=release::${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')) }}"
          echo "::set-output name=buckets::${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v$(git describe --tags --abbrev=0 | cut -c 2-)"

      - uses: actions/setup-node@v2
        if: steps.changes.outputs.app == 'true'
      - uses: actions/cache@v2
        if: steps.changes.outputs.app == 'true'
        with:
          path: ${{ github.workspace }}/app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: build app
        if: steps.changes.outputs.app == 'true'
        run: |
          yarn --cwd=app install --frozen-lockfile
          yarn --cwd=app build
          yarn --cwd=app lint
          tar -zcf app.tar.gz app/dist
      - name: push app to app.touca.io
        if: steps.changes.outputs.app == 'true' && steps.params.outputs.release == 'true'
        run: |
          aws s3 cp app.tar.gz ${{ steps.params.outputs.buckets }}/
          yarn --cwd=app build --configuration=cloud --delete-output-path
          aws s3 sync ./app/dist/ ${{ secrets.AWS_PROD_S3_BUCKET_APP }} --exclude "*.html" --exclude "*.xml" --cache-control public,max-age=31536000,immutable
          aws s3 sync ./app/dist/ ${{ secrets.AWS_PROD_S3_BUCKET_APP }} --exclude "*" --include "*.html" --include "*.xml" --cache-control no-cache
      - name: pull app from aws
        if: steps.changes.outputs.app == 'false'
        run: aws s3 cp ${{ steps.params.outputs.buckets }}/app.tar.gz .

      - uses: actions/upload-artifact@v2
        with:
          name: app-bundle
          path: ${{ github.workspace }}/app.tar.gz
          retention-days: 1

  cmp-build-native:
    name: cmp-build-native
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - name: authenticate to aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_ACCESS_KEY_SECRET }}
          aws-region: us-east-2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=0 | cut -c 2-)"
          echo "::set-output name=release::${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')) }}"
          echo "::set-output name=buckets::${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v$(git describe --tags --abbrev=0 | cut -c 2-)"

      - uses: actions/setup-python@v1
        if: steps.changes.outputs.cmp == 'true'
      - name: install conan
        if: steps.changes.outputs.cmp == 'true'
        run: |
          pip install --no-cache-dir --upgrade conan
          conan profile new default --detect --force
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan remote add --force touca-cpp https://getweasel.jfrog.io/artifactory/api/conan/touca-cpp
      - name: build cmp
        if: steps.changes.outputs.cmp == 'true'
        run: |
          CONAN_SYSREQUIRES_MODE=enabled cmp/build.sh
          tar -zcf cmp.tar.gz cmp/local/dist

      - name: push cmp to aws
        if: steps.changes.outputs.cmp == 'true' && steps.params.outputs.release == 'true'
        run: aws s3 cp cmp.tar.gz ${{ steps.params.outputs.buckets }}/

      - name: pull cmp from aws
        if: steps.changes.outputs.cmp == 'false'
        run: aws s3 cp ${{ steps.params.outputs.buckets }}/cmp.tar.gz .

      - uses: actions/upload-artifact@v2
        with:
          name: cmp-bundle
          path: ${{ github.workspace }}/cmp.tar.gz
          retention-days: 1

  server-build-docker:
    name: server-build-docker
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs:
      - api-build-native
      - app-build-native
      - cmp-build-native
    steps:
      - uses: actions/checkout@v2
      - name: authenticate to aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_ACCESS_KEY_SECRET }}
          aws-region: us-east-2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=0 | cut -c 2-)"
          echo "::set-output name=release::${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')) && (steps.changes.outputs.api == 'true' || steps.changes.outputs.app == 'true' || steps.changes.outputs.cmp == 'true') }}"
          echo "::set-output name=buckets::${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v$(git describe --tags --abbrev=0 | cut -c 2-)"

      - uses: actions/download-artifact@v2
        if: steps.changes.outputs.api == 'true'
        with:
          name: api-bundle
          path: ${{ github.workspace }}
      - uses: actions/download-artifact@v2
        if: steps.changes.outputs.app == 'true'
        with:
          name: docs-external-api
          path: ${{ github.workspace }}
      - uses: actions/download-artifact@v2
        if: steps.changes.outputs.app == 'true'
        with:
          name: app-bundle
          path: ${{ github.workspace }}
      - uses: actions/download-artifact@v2
        if: steps.changes.outputs.cmp == 'true'
        with:
          name: cmp-bundle
          path: ${{ github.workspace }}
      - name: pull client docs from aws
        if: steps.changes.outputs.app == 'true'
        run: |
          aws s3 cp ${{ steps.params.outputs.buckets }}/cpp-docs-external.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/java-docs-external.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/js-node-docs-external.tar.gz .
          aws s3 cp ${{ steps.params.outputs.buckets }}/python-docs-external.tar.gz .
          mkdir -p ./stage/clients/cpp
          mkdir -p ./stage/clients/java
          mkdir -p ./stage/clients/js
          mkdir -p ./stage/clients/python
          tar -xf cpp-docs-external.tar.gz -C ./stage/clients/cpp
          tar -xf java-docs-external.tar.gz -C ./stage/clients/java
          tar -xf js-node-docs-external.tar.gz -C ./stage/clients/js
          tar -xf python-docs-external.tar.gz -C ./stage/clients/python

      - uses: actions/setup-node@v2
        if: steps.changes.outputs.api == 'true'
      - uses: actions/cache@v2
        if: steps.changes.outputs.api == 'true'
        with:
          path: ${{ github.workspace }}/api/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: install api dependencies
        if: steps.changes.outputs.api == 'true'
        run: yarn --cwd=api install --frozen-lockfile --production

      - name: authenticate to container registry
        if: steps.params.outputs.release == 'true'
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_PROD_ECR_REPO }}

      - name: push ops to aws
        if: steps.changes.outputs.ops == 'true' && steps.params.outputs.release == 'true'
        run: |
          tar -zcf deployment-scripts.tar.gz devops
          aws s3 cp deployment-scripts.tar.gz ${{ steps.params.outputs.buckets }}/

      - name: build api docker image
        if: steps.changes.outputs.api == 'true'
        run: |
          mkdir -p ./stage
          tar -xf api.tar.gz -C ./stage
          cp -r ./api/env ./stage/api/env
          cp -r ./api/samples ./stage/api/samples
          cp -r ./api/node_modules ./stage/api/node_modules
          docker build -f config/docker/api.Dockerfile -t touca-api stage

      - name: push api to container registry
        if: steps.changes.outputs.api == 'true' && steps.params.outputs.release == 'true'
        run: |
          docker tag touca-api ${{ secrets.AWS_PROD_ECR_REPO }}/touca-api:${{ steps.params.outputs.version }}
          docker push ${{ secrets.AWS_PROD_ECR_REPO }}/touca-api:${{ steps.params.outputs.version }}

      - name: build app docker image
        if: steps.changes.outputs.app == 'true'
        run: |
          mkdir -p ./stage
          tar -xf app.tar.gz -C ./stage
          tar -xf api-docs-external.tar.gz -C ./stage
          mkdir -p ./stage/app && cp ./app/nginx.conf ./stage/app/
          docker build -f config/docker/app.Dockerfile -t touca-app stage
      - name: push app to container registry
        if: steps.changes.outputs.app == 'true' && steps.params.outputs.release == 'true'
        run: |
          docker tag touca-app ${{ secrets.AWS_PROD_ECR_REPO }}/touca-app:${{ steps.params.outputs.version }}
          docker push ${{ secrets.AWS_PROD_ECR_REPO }}/touca-app:${{ steps.params.outputs.version }}

      - name: build cmp docker image
        if: steps.changes.outputs.cmp == 'true'
        run: |
          mkdir -p ./stage
          tar -xf cmp.tar.gz -C ./stage
          mkdir -p ./stage/cmp/config && cp ./cmp/config/config.prod.json ./stage/cmp/config/
          docker build -f config/docker/cmp.Dockerfile -t touca-cmp stage
      - name: push cmp to container registry
        if: steps.changes.outputs.cmp == 'true' && steps.params.outputs.release == 'true'
        run: |
          docker tag touca-cmp ${{ secrets.AWS_PROD_ECR_REPO }}/touca-cmp:${{ steps.params.outputs.version }}
          docker push ${{ secrets.AWS_PROD_ECR_REPO }}/touca-cmp:${{ steps.params.outputs.version }}
